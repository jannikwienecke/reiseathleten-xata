generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://admin:ztPs6uLfxoX2@ep-fragrant-base-380181-pooler.eu-central-1.aws.neon.tech/neondb?pool_timeout=20&connection_limit=10&connect_timeout=20&pgbouncer=true"
}

model AcitivityDescription {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  fixed_hour              Int?
  fixed_minute            Int?
  fixed_day               Int?
  AcitivityTag            AcitivityTag[]
  DefaultVacationActivity DefaultVacationActivity[]
  VacationActivity        VacationActivity[]
}

model AcitivityTag {
  id                    Int                  @id @default(autoincrement())
  tagId                 Int
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  Tag                   Tag                  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Color {
  id   Int    @id @default(autoincrement())
  name String
  Tag  Tag[]
}

model Location {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  description         String?
  VacationDescription VacationDescription[]
}

model Tag {
  id           Int            @id @default(autoincrement())
  label        String
  colorId      Int
  AcitivityTag AcitivityTag[]
  Color        Color          @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@unique([label, colorId], map: "Tag.label_colorId")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  Vacation Vacation[]
}

model Vacation {
  id                    Int                 @id @default(autoincrement())
  userId                Int
  startDate             DateTime            @default(now())
  endDate               DateTime            @default(now())
  vacationDescriptionId Int
  User                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  VacationDescription   VacationDescription @relation(fields: [vacationDescriptionId], references: [id], onDelete: Cascade)
  VacationActivity      VacationActivity[]
}

model VacationActivity {
  id                    Int                  @id @default(autoincrement())
  vacationId            Int
  datetime              DateTime?
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  Vacation              Vacation             @relation(fields: [vacationId], references: [id], onDelete: Cascade)
}

model VacationDescription {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  locationId              Int
  DefaultVacationActivity DefaultVacationActivity[]
  Vacation                Vacation[]
  Location                Location                  @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model DefaultVacationActivity {
  id                    Int                  @id @default(autoincrement())
  vacationDescriptionId Int
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  VacationDescription   VacationDescription  @relation(fields: [vacationDescriptionId], references: [id], onDelete: Cascade)
}
