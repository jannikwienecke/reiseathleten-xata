// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Tag",
    columns: [
      { name: "label", type: "string", unique: true },
      { name: "color", type: "string", notNull: true, defaultValue: "red" },
    ],
  },
  {
    name: "User",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "password", type: "string" },
    ],
  },
  {
    name: "Location",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "description", type: "string" },
    ],
  },
  {
    name: "Activity",
    columns: [{ name: "name", type: "string", unique: true }],
  },
  {
    name: "AcivityTag",
    columns: [
      { name: "tag", type: "link", link: { table: "Tag" } },
      { name: "activity", type: "link", link: { table: "Activity" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Tag = InferredTypes["Tag"];
export type TagRecord = Tag & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type Location = InferredTypes["Location"];
export type LocationRecord = Location & XataRecord;

export type Activity = InferredTypes["Activity"];
export type ActivityRecord = Activity & XataRecord;

export type AcivityTag = InferredTypes["AcivityTag"];
export type AcivityTagRecord = AcivityTag & XataRecord;

export type DatabaseSchema = {
  Tag: TagRecord;
  User: UserRecord;
  Location: LocationRecord;
  Activity: ActivityRecord;
  AcivityTag: AcivityTagRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Jannik-Wienecke-s-workspace-hebkta.eu-west-1.xata.sh/db/reiseathleten",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
